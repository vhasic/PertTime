# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import csv
import io

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap

from charts import createGanttChart, createPertChart
from pert import Aktivnost
from pert import Pert


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1098, 842)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(mainWindow.sizePolicy().hasHeightForWidth())
        mainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout.setContentsMargins(10, 10, 10, 10)
        self.gridLayout.setHorizontalSpacing(7)
        self.gridLayout.setVerticalSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.doubleSpinBox.setFont(font)
        self.doubleSpinBox.setDecimals(4)
        # Maksimalna vrijednost nije 1 jer je norm.ppf(1)=Inf
        self.doubleSpinBox.setMaximum(0.9999)
        self.doubleSpinBox.setSingleStep(0.1)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.gridLayout.addWidget(self.doubleSpinBox, 4, 1, 1, 1)
        self.naslov = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.naslov.setFont(font)
        self.naslov.setAlignment(QtCore.Qt.AlignCenter)
        self.naslov.setObjectName("naslov")
        self.gridLayout.addWidget(self.naslov, 1, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 4, 0, 1, 1, QtCore.Qt.AlignLeft)
        self.labelSlikaGrafa = QtWidgets.QLabel(self.centralwidget)
        self.labelSlikaGrafa.setText("")
        self.labelSlikaGrafa.setObjectName("labelSlikaGrafa")
        self.gridLayout.addWidget(self.labelSlikaGrafa, 11, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 5, 0, 1, 1)
        self.zadaniPeriod = QtWidgets.QDoubleSpinBox(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.zadaniPeriod.setFont(font)
        self.zadaniPeriod.setMaximum(1000.0)
        self.zadaniPeriod.setObjectName("zadaniPeriod")
        self.gridLayout.addWidget(self.zadaniPeriod, 5, 1, 1, 1)
        self.labelSlikaGrafa2 = QtWidgets.QLabel(self.centralwidget)
        self.labelSlikaGrafa2.setText("")
        self.labelSlikaGrafa2.setScaledContents(True)
        self.labelSlikaGrafa2.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.labelSlikaGrafa2.setObjectName("labelSlikaGrafa2")
        self.gridLayout.addWidget(self.labelSlikaGrafa2, 11, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 2, 0, 1, 2)
        self.textBox = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBox.sizePolicy().hasHeightForWidth())
        self.textBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.textBox.setFont(font)
        self.textBox.setStyleSheet("")
        self.textBox.setObjectName("textBox")
        self.gridLayout.addWidget(self.textBox, 3, 0, 1, 2)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1054, 209))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.labelRezultat = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(10)
        self.labelRezultat.setFont(font)
        self.labelRezultat.setText("")
        self.labelRezultat.setObjectName("labelRezultat")
        self.verticalLayout.addWidget(self.labelRezultat)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 9, 0, 1, 2)
        self.buttonIzracunaj = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonIzracunaj.sizePolicy().hasHeightForWidth())
        self.buttonIzracunaj.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(16)
        self.buttonIzracunaj.setFont(font)
        self.buttonIzracunaj.setStyleSheet("justifyContent: \'center\';\n"
                                           "background-color: rgb(51, 133, 255);\n"
                                           "height: 40;\n"
                                           "width: 250;\n"
                                           "margin: 10;\n"
                                           "borderRadius: 30;\n"
                                           "paddingHorizontal: 30;\n"
                                           "marginTop: 30;\n"
                                           "alignItems: \'center\';\n"
                                           "fontSize: 20;\n"
                                           "color: \"#FFF\";\n"
                                           "fontWeight: \"bold\"")
        self.buttonIzracunaj.setObjectName("buttonIzracunaj")

        self.buttonIzracunaj.clicked.connect(self.on_click)

        self.gridLayout.addWidget(self.buttonIzracunaj, 7, 0, 1, 2, QtCore.Qt.AlignHCenter)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 8, 0, 1, 2)
        self.footnote = QtWidgets.QLabel(self.centralwidget)
        self.footnote.setAlignment(QtCore.Qt.AlignCenter)
        self.footnote.setObjectName("footnote")
        self.gridLayout.addWidget(self.footnote, 12, 0, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1098, 26))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(mainWindow)
        self.actionAbout.setObjectName("actionAbout")

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Pert time algoritam"))
        self.naslov.setText(_translate("mainWindow", "PERT/TIME algoritam"))
        self.label_2.setText(_translate("mainWindow", "Vjerovatnoća za procjenu:"))
        self.label_4.setText(_translate("mainWindow", "Željeno vrijeme trajanja projekta:"))
        self.label.setText(
            _translate("mainWindow", " Naziv,Preduvjeti,Optimistično vrijeme,Modalno vrijeme,Pesimistično vrijeme"))
        self.label_3.setText(_translate("mainWindow", "Rezultat:"))
        self.buttonIzracunaj.setText(_translate("mainWindow", "Izračunaj"))
        self.footnote.setText(_translate("mainWindow",
                                         "Implementacija i testiranje Pert Time algoritma u Python okruženju, Verzija:1.0, Vahidin Hasić 2021"))
        self.actionAbout.setText(_translate("mainWindow", "About"))

    def on_click(self):
        """
        Funkcija se poziva kada se klikne dugme "Izračunaj"
        """
        # dobavljanje teksta iz text box-a
        # očekivani unos je formata: naziv,preduvjet1 preduvjet2 preduvjet3,optimisticno,modalno,pesimisticno
        mytext = self.textBox.toPlainText()
        # pretvaranje u velika slova
        mytext = mytext.upper()
        mytext = "naziv,preduvjeti,optimisticno,modalno,pesimisticno\n" + mytext

        # pretvara uneseni csv tekst u listu dict objekata
        reader = csv.DictReader(io.StringIO(mytext))
        userInput = list(reader)

        self.createPert(userInput)

    def validate(self, naziv, preduvjeti):
        if not isinstance(naziv, str):
            raise ValueError("Naziv treba biti string!")
        if not all(isinstance(s, str) for s in preduvjeti):
            raise ValueError("Preduvjeti trebaju biti stringovi odvjeni znakom razmaka!")

    def createPert(self, userInput: list):
        """
        Kreira pert klasu, dodaje unesene aktivnosti i prikazuje ih na GUIu.

        :param userInput: Ono što je korisnik unio u text area.
        """
        g = Pert()
        correctUserInput = True
        for element in userInput:
            try:
                # baca se greška, ako je korisnik unio više ili manje polja nego što treba, odvojenih sa zarezima
                if len(element) != 5 or element['naziv'] is None or element['preduvjeti'] is None \
                        or element['optimisticno'] is None or element['modalno'] is None \
                        or element['pesimisticno'] is None:
                    raise ValueError("Unos treba biti formata naziv,preduvjeti,optimistično,modalno,pesimistično!")

                naziv = element['naziv']
                preduvjeti = element['preduvjeti'].split()
                try:
                    optimisticno = float(element['optimisticno'])
                    modalno = float(element['modalno'])
                    pesimisticno = float(element['pesimisticno'])
                except ValueError as e:
                    raise ValueError("Optimistično, modalno i pesimistično vrijeme trebaju biti brojevi!")
                self.validate(naziv, preduvjeti)
                # kreiranje i dodavanje aktivnosti
                a = Aktivnost(naziv, preduvjeti, optimisticno, modalno, pesimisticno)
                g.dodajAktivnost(a)
            except Exception as e:
                correctUserInput = False
                self.labelRezultat.setStyleSheet("QLabel { color: rgba(255,0,0); }")
                self.labelRezultat.setText("Error: " + str(e))
        # Samo ako su uneseno podaci koretni može se dalje raditi (računati)
        if correctUserInput:
            # ako su nakon pogrešnog unosa, unesene koretne vrijednosti boja ne treba biti crvena
            self.labelRezultat.setStyleSheet("")
            try:
                g.azurirajGraf()

                #kreiranje i prikaz grafova
                self.createGanttChart(g)
                pixmap1 = QPixmap('gantt.png')
                self.labelSlikaGrafa.setPixmap(pixmap1)
                self.createPertChart(g)
                pixmap2 = QPixmap('pert.png')
                # pixmap = pixmap.scaled(400, 400, QtCore.Qt.KeepAspectRatio)
                self.labelSlikaGrafa2.setPixmap(pixmap2)

                #prikaz ostalih vrijednosti
                vjerovatnoca = self.doubleSpinBox.value()
                period = self.zadaniPeriod.value()
                rezultat = self.createResultString(g, vjerovatnoca, period)

                self.labelRezultat.setText(rezultat)
            except Exception as e:
                self.labelRezultat.setStyleSheet("QLabel { color: rgba(255,0,0); }")
                self.labelRezultat.setText("Error: " + str(e))

    def createResultString(self, g: Pert, vjerovatnoca, period) -> str:
        """
        Vraća string izračunatih vrijednosti.
        """
        rezultat = str(g)+"\n"
        # rezultat += "Kritični putevi:\n" + g.dajStirngKriticnihPuteva()+"\n"
        rezultat += "Svi putevi:\n" + g.dajStringSvihPuteva()+"\n"
        rezultat += "Procijenjeno trajanje projekta za datu vjerovatnocu je: " + str(
            round(g.izracunajProcjenuTrajanjaProjekta(vjerovatnoca), 4)) + "\n"
        rezultat += "Najduže procijenjeno trajanje projekta za datu vjerovatnocu je: " + str(
            round(g.izracunajNajduzuProcjenuTrajanjaProjekta(vjerovatnoca), 4)) + "\n"
        rezultat += "Vjerovatnoća završetka projekta za zadani period je: " + str(
            round(g.izracunajVjerovatnocuZavrsetkaProjekta(period), 4)) + "\n"

        return rezultat

    def createGanttChart(self, graf: Pert):
        """
        Poziva kreiranje gantograma.
        """
        # ove varijable su tipa dict {naziv_aktivnosti:nesto}
        vremenaPocetka = {}
        vremenaZavrsetka = {}
        trajanja = {}
        rezerve = {}
        for aktivnost in graf.aktivnosti:
            # fiktivne aktivnosti nisu bitne i one se ne prikazuju
            if aktivnost.naziv == "fiktivna":
                continue
            vremenaPocetka[aktivnost.naziv] = round(float(aktivnost.pocetniCvor.najranijeVrijeme), 2)
            vremenaZavrsetka[aktivnost.naziv] = round(float(aktivnost.krajnjiCvor.najkasnijeVrijeme), 2)
            trajanja[aktivnost.naziv] = round(float(aktivnost.trajannje), 2)
            rezerve[aktivnost.naziv] = round(float(aktivnost.rezervaAktivnosti), 2)

        createGanttChart(vremenaPocetka, vremenaZavrsetka, trajanja, rezerve)

    def createPertChart(self, graf: Pert):
        """
        Poziva kreiranje pert dijagrama
        """
        # ove varijable su tipa dict {broj_cvora:nesto}
        najranijaVremena = {}
        najkasnijaVremena = {}
        rezerveCvorova = {}
        veze = {}
        for cvor in graf.cvorovi:
            najranijaVremena[cvor.brojCvora] = round(float(cvor.najranijeVrijeme), 2)
            najkasnijaVremena[cvor.brojCvora] = round(float(cvor.najkasnijeVrijeme), 2)
            rezerveCvorova[cvor.brojCvora] = round(float(cvor.rezerva), 2)
            lista = []
            for aktivnost in cvor.izlazneAktivnosti:
                lista.append((aktivnost.krajnjiCvor.brojCvora, aktivnost.naziv))
            veze[cvor.brojCvora] = lista

        createPertChart(veze, najranijaVremena, najkasnijaVremena, rezerveCvorova)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
